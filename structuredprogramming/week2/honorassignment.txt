/* Honor Assignment of week2

Tasks:
    - Use a struct to define a card as an enumerated member that is its suit value and a short that is its pips value.
    - Write a function that randomly shuffles the deck.

    - Then deal out 7 card hands and evaluate the probability that a hand has no pair, one pair, two pair, three of a kind, full house and 4 of a kind.
    - This is a Monte Carlo method to get an approximation to these probabilities.  Use at least 1 million randomly generated hands.

Last edited: 14/MAR/2024
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Def of enum for suit
typedef enum suit
{
    HEARTS,
    DIAMONDS,
    CLUBS,
    SPADES
} suit;

// Def of card
typedef struct card
{
    suit suit;
    short pips;
} card;

// Simple random generator to return int in range [lower,upper]
int rand_range(int lower, int upper)
{
    return (rand() % (upper - lower + 1)) + lower;
}

void fill_deck(card deck[52])
{
    int card_count = 0;
    for (int i = 0; i < 4; i++) // i value for suit
    {
        for (int j = 0; j < 13; j++) // j is card value
        {
            card new_card = {i, j};
            deck[card_count] = new_card;
            card_count++;
        }
    }
}

// Function to shuffel a deck of cards
//
void shuffle(card deck[52])
{
    for (int i = 0; i < 10; i++) // Times to iterate through the deck
    {
        for (int j = 0; j < 52; j++) // Iterate through the whole deck swap two cards
        {
            card temp = deck[j];
            int new_pos = rand_range(0, 52);
            deck[j] = deck[new_pos];
            deck[new_pos] = temp;
        }
    }
}
void deal_hand(card deck[52], card hand[7])
{
    shuffle(deck);
    for (int i = 0; i < 7; i++)
        hand[i] = deck[i];
}
void print_suit(card card)
{
    switch (card.suit)
    {
    case HEARTS:
        printf("HEARTS");
        break;
    case DIAMONDS:
        printf("DIAMONDS");
        break;
    case CLUBS:
        printf("CLUBS");
        break;
    case SPADES:
        printf("SPADES");
        break;
    default:
        printf("Undefined");
        break;
    }
}

// Function to print cards
void print_cards(card hand[], int size)
{
    int i = 0;
    while (i < size)
    {
        card card = hand[i];
        printf("Pips: %d, Suit: ", card.pips);
        print_suit(card);
        printf("\n");
        i++;
    }
}

// Function which evaluates the hand
int eval_hand(card hand[], int size)
{
    int count[13] = {0};       // Array which keeps track of the number of each card the person has
    int combinations[5] = {0}; // Array which keeps track of the card combinations
    int i = 0;
    int j = 0;

    while (i < size)
    {
        count[hand[i].pips] += 1;
        i++;
    }

    while (j < 13)
    {
        combinations[count[j]] += 1;
        j++;
    }

    // Check the different conditions for each hand
    if (combinations[4] != 0)
        return 5;
    if (combinations[3] != 0 && combinations[2] != 0)
        return 4;
    if (combinations[3] != 0)
        return 3;
    if (combinations[2] == 2)
        return 2;
    if (combinations[2] == 1)
        return 1;
    return 0;
}

void print_result(int results[6], float number_hands)
{

    printf("No Pair: %d, probability: %f\n", results[0], results[0] / number_hands);
    printf("One Pair: %d, probability: %f\n", results[1], results[1] / number_hands);
    printf("Two Pair: %d, probability: %f\n", results[2], results[2] / number_hands);
    printf("Three of a kind: %d, probability: %f\n", results[3], results[3] / number_hands);
    printf("Full house: %d, probability: %f\n", results[4], results[4] / number_hands);
    printf("Four of a kind: %d, probability: %f\n", results[5], results[5] / number_hands);
}

// Main
int main(void)
{
    int NUMBER_HANDS = 10000000;

    srand(time(0)); // Set seed for random generator
    int i = 0;
    card deck[52];
    card hand[7];
    int results[6] = {0};
    while (i < NUMBER_HANDS)
    {
        fill_deck(deck);
        deal_hand(deck, hand);
        printf("%d\n", i);
        int result = eval_hand(hand, 7);
        results[result] += 1;
        i++;
    }
    print_result(results, NUMBER_HANDS);
}