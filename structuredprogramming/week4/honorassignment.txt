/* Honor assignment of week 4

Task:
    - Open and read a file of integer pairs into an array that is created with the first integer telling you how many to read.

    - Write a routine that places these values into a binary tree structure. Then walk the tree “inorder” and print these values to the screen.


Example:
    - So  4 9  11  4  5    would mean create an integer array size 4 and read into data[].
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_INTS 10000

typedef struct btree
{
    int data;
    struct btree *left;
    struct btree *right;
} btree;

// Function to construct a new node in the tree
btree *new_node(int data)
{
    btree *new_node = malloc(sizeof(btree));
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}

// Construct a tree from array and return root
void insert(btree **node, int array[], int index, int number_elements)
{
    if (index < number_elements)
    {
        *node = new_node(array[index]);

        insert(&((*node)->left), array, 2 * index + 1, number_elements);
        insert(&((*node)->right), array, 2 * index + 2, number_elements);
    }
}

// print tree
void print_tree(btree *tree, int level)
{
    if (tree == NULL)
        return;

    print_tree(tree->right, level + 1);
    printf("%*s->%d\n", 4 * level, "", tree->data);
    print_tree(tree->left, level + 1);
}

int main(void)
{
    int array[MAX_INTS];
    int elements = 0;
    // open file
    FILE *file = fopen("input.txt", "r");

    // Check if file was opened
    if (file == NULL)
    {
        printf("Unable to open the file.\n");
        return 1;
    }

    // read file
    while (fscanf(file, "%d", &array[elements]) != EOF)
    {
        elements++;
    }
    // close file
    fclose(file);

    int number_elements = array[0];
    int new_array[number_elements];
    for (int i = 1; i < number_elements + 1; i++)
        new_array[i - 1] = array[i];

    btree *tree = NULL;

    insert(&tree, new_array, 0, number_elements);
    print_tree(tree, 0);

    return 0;
}
